Reactive Programming:
....................

What is Reactive Programming ?

Programming Paradigm(way).


Java 8 , is functional style, object oriented pl.


Reactive Programming languages:

There is no such separate pl which adopts reactive programming alone.

 rather which is eXtended by other languages : 
ReactiveX ->through frameworks and libs  -reactiveX for java -Rxjava,for javascript - Rxjs.


What is Reactive?

  Oxford dictionary defines reactive  as "showing a response to a stimulus"

Showing a response to a stimulus
1.1 (Physiology) Showing an immune response to a specific antigen

1.2 (of a disease or illness) caused by a reaction to something: ‘reactive
depression’

Acting in response to a situation rather than creating or controlling it

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Reactive Architecture / Software /System

Application to software

A software showing responses to stimuli

Stimuli could be
● Events, Messages, Requests, Failures, Measures, Availability…

Who is controlling program flow:
   by messages,events,....
● The end of the flow of control ?

Is it new?
      ● Actors, Object-oriented programming…


Reactive Programming is extension of Object-oriented Programming and event driven programming and functional style programming.

How to build event driven programming/
 Event driven programming is extension of "Object oriented " design pattern "Observerable" Design pattern.


Reactive programming is collection of many design patterns and principles.

 -Observable Design pattern
 -Iterator Design pattern
 -Functional style pattern




 -Observable Design pattern
				
				Publisher/Owner/Producer
					|
	      -----------------------------------------------------------------			
	     |                   |          |           |
          Listeners            Subscriber  Subscriber Subscriber

In oo, Publisher and Subscribers are objects.


Why observable design pattern?

Object Communication.

Why Object communication?
 -To share data  - ---- method dispatch--- message passing.

How objects communicate?

Patterns :

1. Tight coupled pattern


class OrderService{

 //connect objects
private InventoryService inventoryService;
 //setter and getter
 //constructors...

  public boolean updateInventory(Order order){
         return inventoryService.upateInventory(order);
  }

}

class InventoryService{

  public boolean updateInventory(Order order){

   //write logic to update inventory data source....

  }
}


1.Loosly coupled pattern

-via nonblocking message oriented ,event driven arch.

How to build pattern?

Observable design pattern : Event driven  message passing.



Publisher sends/publishes data with events via broker called notfication interface to subcribers

                        Publisher/Owner/Producer
					|
			 data + event(Event)
					|
		        Event Notification Interface
					|
	      -----------------------------------------------------------------			
	     |                   |          |           |
          Listeners            Subscriber  Subscriber Subscriber


      Subscribers are objects who are listening for events, once event is given, who process event and consume take.


Legacy Observable Design pattern has some drawback:

Legacy observer design pattern has only 1 thing

  1.they will be able to send only data

Have not addresssed the following
  1.what if error is produced
  2.what if the producer has stopped producing values. 

Reactive programming address the above issues.


Producer can send data,error, complete - events/signals

				Publisher/Owner/Producer <---------Data Source(Device)
					|
				 data / error  & complete
					|
			       Event Notification Interface
					|
			------------------------------------- channels
			|               |                  |
        	      data              error              complete

			|		|		   |
			------------------------------------
					|
				     Subscriber



channel ; it transport layer through which data and event is transmitted.

in reactive programming each thing is separtly channels

In legacy design pattern, Producer can use only one Channel to send data.


Iterator Design Pattern:

Iterator design pattern talks about how to fetch value/ pull value from the Producer.


In General iterator design pattern  and implementation  is "pull based".


-In Pull Systems,The Consumer determines when it receives data from the producer.
 The Producer itself is unaware of what the data will be delivered to the consumer.

 Use case:
 - list of employees having id,name,salary


 - I want all employee names in upper case,where employee salary is less than 50000.

   code
                   List-Data Source
		          |
		must be loaded into memory
		         |
          
                 for(condition){
			  if(condition){
				  get all filtered data
			  }
			  transform filtered data : uppercase
		  }

Major Drawbacks of Pull based model:
...................................

1. the whole data must have been loaded into memory
2. More imperative rather than declarative


Programming types :

- Imperative
- Declarative

- Imperative Program
    focus what it is , and how it is.

           List-Data Source
		          |
				  must be loaded into memory
		          |
          for(condition){
			  if(condition){
				  get all filtered data
			  }
			  transform filtered data : uppercase
		  }


Imperative means ; developer must focus how to write biz logic and also what is core biz logic.

-different algorithms
-scalability when req is increased
-code maintenance


- Declarative

  Focus what you want , dont foucs algorthim.


-Focus only what it is not how it is
-More readable
-More maintainable
-Stable code across the application/developers.


DSL -Domain specific lanaguages are the most popular examples of declarative programming.


Java supports imperative and declarative.

Our focus is more on declarative rather than imperative.

Any code can be written declarative.



Java declarative Programming:
............................

Java supports declarative programming through "functional Abstraction".

java supports collection processing declaratively via "Streams"


Streams:
  Functional abstraction , more declarative , data Processing.

  Eg:
  List.stream().map().filter(condition).collect()

Reactive Programs are much more "declarative".


..................................................................................

Push Based Programming:
.........................

-Opposit to Pull
-Where consumer never pull the data.
-Producer starts sending data over channel with help of events.
-Consumer only listens for data.



	          Publisher/Owner/Producer <---------Data Source(Device)
					|
				  push data into memory over time.
					|
				  -----------------------------
                                      1---2---3--4--error--5--|-->
				  ------------------------------
                        		|    
				  emit event data,erorr,complete           	
			                |
									|
			       Event Notification Interface
					|
			------------------------------------- channels
			|               |                  |
                     data              error              complete

			|		|		   |
			------------------------------------
					|
				     Subscriber


Reactive programming focus on push based .

Now a days reactive programming even supports pull. ->Reactive Pull ----> [Push + Pull].


Functional style pattern:

-High Order function
 -Functions can be passed as parameters 
 -Functions can be returned as a result
 -Separation of responsibilities (separation of Concerns)
 -Patterns: Execute-Around, Deferred Execution, Decorator, Strategy, Template      Method

 newFunction =  func1 + func2

-Pure function

  function which takes parameter, returns the same as it is
  function which wants to return new data , dont modify the data , rather 
  creates new of copy of the data , return that
 
 -Immutablity
    Dont override the same memory location,rather creates copy of that memory and
	return that.

Reactive Programming takes the best practices of observable ,iterator,functional style  in one place.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Standards of Reactive Programming:
.................................

->The Reactive Manifesto:https://www.reactivemanifesto.org/

   It is standard, published to build and ensure that system is fully reactive.

Principles of Best Reactive System:

Principles of Best Reactive System:

1.Responsive:
   Reactive Systems should be responsive : Quick/Timely result.

2.Resilient:
   Any System is subject to fail, You must have failure work around.
   failures and how to fallback, provides high availability

3.Elastic : scalability
   In case of load, how to scale application by increasing and decreasing resources(Softwares)

4.Message Driven
   The Programs sends and receives data via events- event driven.

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&



Reactive Streams:
 Reactive + Non Blocking With back pressure.

Reactive Streams is an initiative to provide a standard for asynchronous stream processing with non-blocking back pressure.

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Reactive landscap:

-Reactive Programming
   Writing data processing application inside any language based on 
   -observable , iterator, functional style.

-Reactive System
   The overall application which is written based on reactive standards
   those system is called Reactive System.

-Reactive Streams
    - it is also spec based on data processing

-Reactive Microservice
   -Micro Service architecture is developed based on Reactive systems, programming principles those are called reactive microservice.

History of Reactive Programming:

It is microsoft Language-Integrated Query (LINQ) is the name for a set of technologies based on the integration of query capabilities directly into the C# language.

        // Specify the data source.
int[] scores = new int[] { 97, 92, 81, 60 };

        // Define the query expression.
        IEnumerable<int> scoreQuery =
            from score in scores
            where score > 80
            select score;

Netflix inspired the LINQ, who wanted put the same syntax into java language.
For that who created  and crafted specfication that is called "Reactive"

Netflix Spec:
-declarative ,functional style,observable,iterator based programming to process
data inside java language.

                      "The birth of Reactive Programming".

Netflix started building a lib called "Reactive java", then open sourced, after
that it became very popular, other languages also started implementing reactive

features,

"ReactiveX-(Extension) - ReactiveX-Language ===>ReactiveXjava===>Rxjava.

Rxjs,Rxscala,Rxpyhton............

Reactive programs are using sql like operators(or,and,==,>) , We call Reactive operators- Methods in java.

*&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Java and Reactive Programming:

1.Rxjava 1.x
2.Rxjava 2 and 3
3.Project Reactor -- alternate to Rxjava -Pivtol implementation.
             largly used in side spring 5.....
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Lets code: Rxjava 
.................

Rxjava is object oriented, functional style lib/api.

Stream:
 flow of something.
flow starts from one place to another place

 start = source
 end  = target

flow of data.

reactive programming talks about data streams,while streaming how to process data.

Where i can use reactive programming?
  Where ever data is moving, data is being processed.

what is special with data processing and moving with reactive?

 -event driven data movement.
 - event driven can lead non blocking.
 - event driven helps data movement chunk(set by set) by chunk.

apis in rx java ;

Create stream

Process stream

report processed stream

in order to create, process stream reactive programming(rxjava) offers special functional style api(methods) operators.

reactive operators are "functional based programming" 
  -pure function
  -immutablity. 

Stream Representation Objects:
.............................

In rxjava we have many stream objects.

1.Observable
2.Subject
3.Single
4.Maybe
5.Completeable
6.Flowable

Operators:
are classified into various category
-create Stream
-tranformation
-filtering
-coimbing
-Error handling
-utility 
-conditional and boolean
-mathmetical and aggregate
-backpressue
-connectable
-converter



Use case :

Observable:
 how to create from scratch, with custom logic : Create

Used to trigger event with data

public interface Emitter<T> {
    void onNext(@NonNull T value); -  data event

    void onError(@NonNull Throwable error); - error event

    void onComplete();
}



package com.ibm.vertx.reactive;

import io.reactivex.rxjava3.core.Observable;

public class StreamCreateOperator {
    public static void main(String[] args) {
        //observable + push based iterator + event driven
        Observable<Integer> stream = Observable.create(emitter -> {
            //send via event notication ; push
            emitter.onNext(1); //data event -----subscribe
            emitter.onNext(2); //data event -----subscribe
            emitter.onNext(3); //data event -----subscribe
            //throw error
            emitter.onError(new RuntimeException("something went wrong"));
            emitter.onNext(4); //data event -----subscribe
            emitter.onNext(5); //data event -----subscribe
            emitter.onNext(6); //data event -----subscribe

            emitter.onComplete();
        });

        //subscriber
        stream.subscribe(data -> {
            System.out.println(data);
        }, error -> {
            System.out.println(error);
        }, () -> System.out.println("complete"));


    }
}

When stream is closed?

-when ever error is thrown.
-when ever oncomplete is called

------------------------------------------------------------------------------------------------------

Data Sources :

What can be a data source for a stream.

Can be primitivies,Objects,Array,List,Future,Callable..

package com.ibm.vertx.reactive;

import io.reactivex.rxjava3.core.Observable;

package com.ibm.vertx.reactive;

import io.reactivex.rxjava3.core.Observable;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;

class Employee {
    private int id;
    private String name;

    Employee() {
    }

    public Employee(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "Employee{" +
                "id=" + id +
                ", name='" + name + '\'' +
                '}';
    }
}


public class StreamCreationOperators {
    public static void justOperator() {
        Observable<Integer> stream = Observable.just(1, 2, 3, 4, 5, 6, 7);
        //  stream.subscribe(data -> System.out.println(data), error -> System.out.println(error), () -> System.out.println("complete"));
        stream.subscribe(System.out::println, System.out::println, () -> System.out.println("complete"));
    }

    public static void justEmployee() {
        Observable<Employee> stream = Observable.just(new Employee(1, "Subramanian"));
        //  stream.subscribe(data -> System.out.println(data), error -> System.out.println(error), () -> System.out.println("complete"));
        stream.subscribe(System.out::println, System.out::println, () -> System.out.println("complete"));

    }

    //data source is array
    public static void arrayOperator() {
        Integer[] array = {1, 2, 3, 4, 5};
        Observable<Integer> stream = Observable.fromArray(array);
        //  stream.subscribe(data -> System.out.println(data), error -> System.out.println(error), () -> System.out.println("complete"));
        stream.subscribe(System.out::println, System.out::println, () -> System.out.println("complete"));
    }

    public static void listOperator() {
        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8);
        Observable<Integer> stream = Observable.fromIterable(list);
        //  stream.subscribe(data -> System.out.println(data), error -> System.out.println(error), () -> System.out.println("complete"));
        stream.subscribe(System.out::println, System.out::println, () -> System.out.println("complete"));
    }

    public static void listEmployeeOperator() {
        List<Employee> list = Arrays.asList(new Employee(1, "A"), new Employee(2, "b"));
        Observable<Employee> stream = Observable.fromIterable(list);
        //  stream.subscribe(data -> System.out.println(data), error -> System.out.println(error), () -> System.out.println("complete"));
        stream.subscribe(System.out::println, System.out::println, () -> System.out.println("complete"));
    }

    //i want to generate a seq of 1000 no;
    public static void rangeOperator() {
        Observable<Integer> stream = Observable.range(1, 100);
        //  stream.subscribe(data -> System.out.println(data), error -> System.out.println(error), () -> System.out.println("complete"));
        stream.subscribe(System.out::println, System.out::println, () -> System.out.println("complete"));
    }

    //range and interval looks like same but, interval start emitting a sequence of numbmers based on cpu
    //timer
    public static void intervalOperator() {
        Observable<Long> stream = Observable.interval(1000, TimeUnit.MILLISECONDS);
        //  stream.subscribe(data -> System.out.println(data), error -> System.out.println(error), () -> System.out.println("complete"));
        stream.subscribe(System.out::println, System.out::println, () -> System.out.println("complete"));
    }

    public static void main(String[] args) throws InterruptedException {
        //justOperator();
        //arrayOperator();
        //listOperator();
        //rangeOperator();
        // intervalOperator();
        justEmployee();
        listEmployeeOperator();
        Thread.sleep(10000);

    }
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Data Processing:

Stream Classificaton:

-up stream
-down stream


    if you want to understand this concept, Assembly Line Analogy:

    Reactive Programs are thought as conveyor belt and work stations. The raw material pours from a source and ends up as fininished product ready to be pushed to the consumer.

    work stations are implemented by Reactive Operators(methods), are connected via Stream Objects(Observable)


operator : methods

Transformation workstation: 
 Which transforms product from one shape to another.
  
map
 is operator,- function/method.

every operator in reactive has been designed with "function style"- functional principles
  -pure function && immutablity.

pure function is function, which never and ever mutates the old state.
  it always gives new state.

pure function returns the new Stream at end of every operator.


fluent pattern:
 String str="hello".trim().touppercase().tolowercase().xxx.().yyy...()



package com.ibm.vertx.reactive;

import io.reactivex.rxjava3.core.Observable;

public class StreamTransformation {
    //transformation ; transform stream data from one fromate to another
    public static void transform() {
        Observable.just(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) //source / up stream
                .map(i -> {
                    System.out.println("first Map " + i); // down / up stream
                    return i * 10; //new stream
                })
                .map(i -> {
                    System.out.println("Second Map " + i);
                    return i * 2; //new stream
                })
                .map(i -> {
                    System.out.println("Third Map " + i);
                    return i * 5; // new stream
                })
                .subscribe(System.out::println, System.out::println, () -> System.out.println("Done"));
    }

    public static void main(String[] args) {
        transform();
    }
}

Lab:
Process employee list, return all employee name in upper case.

    transformEmployee();

  public static void transformEmployee() {
        List<Employee> list = Arrays.asList(new Employee(1, "A"), new Employee(2, "b"));
        Observable
                .fromIterable(list)
                .map(employee -> {
                    return employee.getName().toUpperCase();
                })
                .subscribe(System.out::println, System.out::println, () -> System.out.println("complete"));
    }

   
 public static void flatting() {
        Observable.just(10,23,90).flatMap(x -> Observable.just(12,3,5,6)).subscribe(System.out::println, System.out::println, () -> System.out.println("Done"));

    }

zip operator :

 public static void zip() {
        Observable<Integer> intStream = Observable.just(1, 2, 3, 4);
        Observable<String> stringStream = Observable.just("a", "b", "c", "d", "e");

        Observable.zip(intStream, stringStream, (i, str) -> {
            System.out.println("I " + i + " String " + str);
            return i + str;
        }).subscribe(System.out::println, System.out::println, () -> System.out.println("Done"));

    }


flatting : making observable of observable into single observable.

 [
  [ ]
 ]
---->flatMap
 The difference is that the map operation produces one output value for each input value, whereas the flatMap operation produces an arbitrary number (zero or more) values for each input value.


    public static void flatMap() {
        Observable.just(1, 2, 3, 4, 5).map(i -> {
                    System.out.println("map return vaule");
                    return i;// return only value
                }
        ).subscribe(System.out::println, System.out::println, () -> System.out.println("Done"));
        Observable.just(1, 2, 3, 4, 5).flatMap(i -> {
                    System.out.println("source value " + i);
                    return Observable.just(2, 3, 8, 9);
                }
        ).map(j -> {
            System.out.println("Previous flat map value : " + j);
            return j * 2;
        }).subscribe(System.out::println, System.out::println, () -> System.out.println("Done"));
    }


utitlies:
........

  //other operators distinct,sorted
    public static void utilties() {
        List<String> words = Arrays.asList("the", "quick", "quick", "brown", "fox", "apple", "fox", "jumped", "over", "the", "lazy", "dog");
        Observable<String> manyLetters = Observable.fromIterable(words)
                .flatMap(word -> Observable.just(word))
                .distinct() // boolean  operator will eleminate duplicates
                .sorted();  // operator which sorting.
        manyLetters.subscribe(System.out::println);
    }

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Subscription:
 reading data, error, complete single.

rxjava provides a separate methods/operators available to read data,error,complete instead of using
subscribe method alone.

nothing happens until subscribe is called.

Disploable Interface:

To remove the stream, stop emitting values.

Types of streams:

1.finite stream
   stream will end
how to create finite ; range,create,just....
2.infinite stream
  stream never end.
 interval

How to close the stream?

 with help of Disploable interface.

subscribe method return type is Disposable , whose method is called dispose method.

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

BroadCasting:
............
Producer(Stream)-----can be connected with ---one Subscriber : 
one to one  This communication style is called "unicast".

Producer(Stream)----can be connected with ----->many subscribers : 
one to Many  This communication style is called "Multicast".

Based on this communication style stream can be classified into two category.

1.Cold Observable(Cold Stream)
2.Hot Observable(Hot Stream)

1.Cold Observable

1.Observable that doesn’t emit items until a subscriber subscribes.

2.If we have more than one subscriber, then observable will 
emit sequence of items to all subscribers one by one.

3.Each subscriber get fresh copy of the data from the begining.

4.Most of Observerables are Cold.



package com.ibm.vertx.reactive;

import io.reactivex.rxjava3.core.Observable;
import io.reactivex.rxjava3.disposables.Disposable;

import java.util.concurrent.TimeUnit;

public class ColdStream {
    public static void coldStream() throws InterruptedException {
        Observable<Long> myObservable = Observable.interval(1, TimeUnit.SECONDS);

        //many subscribers; when ever i call subscribe method, new subscriber object is
        myObservable.subscribe(item -> System.out.println("Observer 1: " + item));
        ;
        //after 3scs new subscriber joins
        Thread.sleep(3000);
        Disposable subscriber2 = myObservable
                .doOnSubscribe((r) -> System.out.println("Observer 2 Joining"))
                .doFinally(() -> System.out.println("Observer 2 left"))
                .subscribe(item -> System.out.println("Observer 2: " + item));
        Thread.sleep(5000);
        subscriber2.dispose();
        Thread.sleep(8000);
    }

    public static void main(String[] args) throws InterruptedException {
        coldStream();

    }
}




Hot Observable:

1.Observables that don’t wait for any subscription. They start emitting items   when created.
2.They don’t emit the sequence of items again for a new subscriber.

3.When an item is emitted by hot observable, all the subscribers that are   subscribed will get the emitted item at once.


There are many ways to implement hot observables:

1.ConnectableObservable
2.Subjects


1.ConnectableObservable:
  A ConnectableObservable is a single observable source for different observers.

A ConnectableObservable is a single observable source for different observers. The main difference aside from being a single observable source is that calling subscribe on a ConnectableObserver will not trigger emission, but connect will.

converting existing cold to hot.

package com.ibm.vertx.reactive;

import io.reactivex.rxjava3.core.Observable;
import io.reactivex.rxjava3.disposables.Disposable;
import io.reactivex.rxjava3.observables.ConnectableObservable;

import java.util.concurrent.TimeUnit;

public class ColdStream {
    public static void coldStream() throws InterruptedException {
        Observable<Long> myObservable = Observable.interval(1, TimeUnit.SECONDS);

        //many subscribers; when ever i call subscribe method, new subscriber object is
        myObservable.subscribe(item -> System.out.println("Observer 1: " + item));
        ;
        //after 3scs new subscriber joins
        Thread.sleep(3000);
        Disposable subscriber2 = myObservable
                .doOnSubscribe((r) -> System.out.println("Observer 2 Joining"))
                .doFinally(() -> System.out.println("Observer 2 left"))
                .subscribe(item -> System.out.println("Observer 2: " + item));
        Thread.sleep(5000);
        subscriber2.dispose();
        Thread.sleep(8000);
    }

    public static void hotStream() throws InterruptedException {
        //cold
        Observable<Long> myObservable = Observable.interval(1, TimeUnit.SECONDS);
        //convert cold into hot
        ConnectableObservable<Long> connectableObservable = myObservable.publish();
        connectableObservable.connect();
        connectableObservable
                .doOnSubscribe((r) -> System.out.println("Observer 1 Joining"))
                .subscribe(item -> System.out.println("Observer 1: " + item));
        Thread.sleep(3000);
        connectableObservable
                .doOnSubscribe((r) -> System.out.println("Observer 2 Joining"))
                .subscribe(item -> System.out.println("Observer 2: " + item));
        Thread.sleep(3500);
        connectableObservable
                .doOnSubscribe((r) -> System.out.println("Observer 3 Joining"))
                .subscribe(item -> System.out.println("Observer 3: " + item));

        Thread.sleep(8000);

    }

    public static void main(String[] args) throws InterruptedException {
        //    coldStream();
        hotStream();

    }
}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Streo types :
 Bean
   -Component,Service,Repository,Controller

Rx java Streo Types:
...................
Observable - o---n 
Single - only item
Maybe - single or empty
Completeable - only complete


Single:
......
RxJava (and its derivatives like RxGroovy & RxScala) has developed an Observable variant called “Single.”

A Single is something like an Observable, but instead of emitting a series of values — anywhere from none at all to an infinite number — it always either emits one value or an error notification.

1.Single is an observable that emits only a single item.


    public static void singleType() {
        Single.create(emitter -> {
            emitter.onSuccess("Hello");
        }).subscribe(System.out::println);
        //   Single.create(emitter -> emitter.onError(new RuntimeException("error"))).subscribe(System.out::println);
        Single.just(1).subscribe(System.out::println);
    }


Maybe:

Maybe is similar to Single . but special Singles

only item: Maybe.just
only completed single: Maybe.empty
only error : Maybe.error


Completable:

Objective:

only error
only complete
not data

package com.ibm.vertx.reactive;

import io.reactivex.rxjava3.core.Completable;
import io.reactivex.rxjava3.core.Maybe;
import io.reactivex.rxjava3.core.Observable;
import io.reactivex.rxjava3.core.Single;

public class StreamStreoTypes {
    //observable 0 to many - o-n
    public static void observableType() {
        Observable.just(1, 2, 3, 4).subscribe(System.out::println, System.out::println, () -> System.out.println("done"));
    }

    public static void singleType() {
        Single.create(emitter -> {
            emitter.onSuccess("Hello");
        }).subscribe(System.out::println);
        //   Single.create(emitter -> emitter.onError(new RuntimeException("error"))).subscribe(System.out::println);
        Single.just(1).subscribe(System.out::println);
    }

    public static void maybeType() {
        //only item
        Maybe.just(1).subscribe(System.out::println);
        // Maybe.error(new RuntimeException("error")).subscribe(System.out::println);
        Maybe.empty()
                .subscribe(System.out::println, System.out::println, () -> System.out.println("onComplete"));

    }

    public static void completeTest() {
        Completable.complete().subscribe(() -> System.out.println("Completeable"));
    }


    public static void main(String[] args) {
        // observableType();
        // singleType();
        //maybeType();
        completeTest();
    }
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Reactive Streams:

It is spec.

Back Pressure:

Upstream is faster enough to stream data to downstream , where downstream is unable to process data.
   -Back Pressure.

When back pressure happens , 
  -data loss
  -data inconsisistency

How to manage backpressure?
we have various patterns


Rxjava 1.x 
 -Through backpressure operators
Buffer
Sample
Debounce
Window

backpressure operators
 strategies for coping with Observables that produce items more rapidly than their observers consume them


1.Via Operators:

Most of the Flitering Operaors are back pressure managed operators

 debounce,distinct,ElementAt,filter,first,ignoreElements,Last,sample,skip,skipLast,take,takeLast.

During backpressure, items may be droped
 drop operators: fliter
 collecting operators: window,buffer




Reactive Pull
..............
Above two strategies manage backpressure by dropping items, if your application need to process all the items emitted by source observable then you can’t use those strategies.

In this scenario, using reactive pull strategy is the right choice. In reactive pull, subscriber requests required number of items from observable by calling request().


Reactive Pull:

 Reactive programs supports push paradigm
 Reactive programs supports even pull also


PUSH + PULL = Reactive PULL

Down Stream can control up stream with help of mediator object that is called
"Subscription object"

DownStream --------Subscription ---------UpStream

DownStream --------Subscription ---------UpStream
                        |
                 request(no-elements)

Reactive Streams:
.................
   Reactive Stream is spec published to enable backpressure and create Back Pressure streams.-https://www.reactive-streams.org/

How provide backPressure handling feature at api level or Publisher level?

Soultion : Publisher level, in order to provide publisher , Many companies joined together

who published another spec "Reactive Stream"


Reactive Streams is an initiative to provide a standard for asynchronous stream processing with non-blocking back pressure. This encompasses efforts aimed at runtime environments (JVM and JavaScript) as well as network protocols.



The Team provided common spec:

1.Publisher
2.Subscriber
3.Subscription
4.Processor

After this spec published, Rxjava team relased new version - Rxjava 2 which implements reactive stream specification..

Rxjava 1 - has no implementation of "Reactive Stream Spec"

Rxjava 2 - Reactive Stream Spec implemented.

Rxjava 2 Provided one Simple Observable.

Flowable ====== Observable


io.reactivex.rxjava3.core.Flowable:
 0..N flows, supporting Reactive-Streams and backpressure

package com.ibm.vertx.reactive;

import io.reactivex.rxjava3.core.Flowable;
import io.reactivex.rxjava3.core.Observable;
import org.reactivestreams.Subscriber;
import org.reactivestreams.Subscription;

import java.util.concurrent.TimeUnit;

public class BackPressure {
    public static void sampleOpertor() {
        Observable<Integer> observable = Observable
                .range(1, 5000)
                .sample(1, TimeUnit.NANOSECONDS) //back pressure operator
                .map(i -> i); //down stream dont get values from 1 rather
        observable.subscribe(s -> {
            System.out.println("value after every 1 nano secs " + s);
        });
    }

    public static void buffer() {
        Observable.range(1, 2000)
                .buffer(5) //back pressure operator , buffering/storing values and send to down stream
                .map(i -> i) //down stream dont get values from 1 rather than get buffer of 5
                .subscribe((i) -> System.out.println("Item Got :" + i), System.out::println);
    }

    public static void lastN() {
        Observable.range(1, 100)
                .takeLast(50) //back pressure drop all items , expect last 50 values
                .map(i -> i) //down stream dont get values from 1 rather than get buffer of 5
                .subscribe((i) -> System.out.println("Item Got :" + i), System.out::println);
    }

    public static void basicFlowable() {
        Flowable.range(1, 100).subscribe(System.out::println);
    }

    //reactive pull
    public static void reactivePull() {
        Flowable flowable = Flowable.range(1, 100);

        flowable.subscribe(new Subscriber() {
            Subscription subscription = null;

            @Override
            public void onSubscribe(Subscription s) {
                this.subscription = s;
                //start requesting
                //s.request(Long.MAX_VALUE);
                subscription.request(4);
            }

            @Override
            public void onNext(Object o) {
                // subscription.request(4);
                System.out.println(o);

            }

            @Override
            public void onError(Throwable t) {
            }

            @Override
            public void onComplete() {
                System.out.println("complete");
            }
        });
    }

    public static void main(String[] args) {
        //sampleOpertor();
        //buffer();
        //lastN();
        //basicFlowable();
        reactivePull();
    }
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Threading and Reactive Programming:
...................................

how do i implement multithreading?

Thread and Runnable.

Executor framework- abstraction  for multithreading.

Reactive extension introduced functional style multithreading.

Schedulers.

Rx java and Schedulers

Schedulers can help  isloate streaming processing into multi threading
Schedulers:
...........

A scheduler is low level thread abstraction similar to "ExecutorService" in java.

Scheduler has wide range of features
- virutal time for testing
- trampoling for immediate scheduling
so on...

The Schedulers class has static methods that give access to the following execution contexts:

The current thread (Schedulers.immediate()).

A single, reusable thread (Schedulers.single()).
 Note that this method reuses the same thread for all callers, until the Scheduler is disposed. If you want a per-call dedicated thread, use Schedulers.newSingle() for each call.


An elastic thread pool (Schedulers.elastic()). 

It creates new worker pools as needed, and reuse idle ones.
 Worker pools that stay idle for too long (default is 60s) are disposed. This is a good choice for I/O blocking work for instance. Schedulers.elastic() is a handy way to give a blocking process its own thread, so that it does not tie up other resources.

a fixed pool of workers that is tuned for parallel work (Schedulers.parallel()). It creates as many workers as you have CPU cores


How to run operators in a separate thread of execution?

observeOn(s):
 where you have attached this operator in the middle of subscriber chain, it takes signals from the upstream and replays them downstream while executing the task from the associated scheduler.


 source()---map()---filter-|-map---filter---map |
                         observeon(sheduler)




subscribeOn
 applies to the subscription process,
 no mater where you place the subscribeOn in the chain.
 It always affects context of the source emission.

 source()---map()---filter-|-map---filter---map |
                         subscribeOn(sheduler)


package com.ibm.vertx.reactive;

import io.reactivex.rxjava3.core.Flowable;
import io.reactivex.rxjava3.schedulers.Schedulers;

public class ReactiveThreading {
    public static void main(String[] args) {
        Flowable.just("Hello Scheduler")
                .map(message -> { //up stream
                    System.out.println("First Map is running on " + Thread.currentThread().getName());
                    return message;
                })
                .observeOn(Schedulers.computation()) // attach thread , so that down streams will run
                .map(message -> { //down and up stream
                    System.out.println("Second Map is running on " + Thread.currentThread().getName());
                    return message;
                })
                .observeOn(Schedulers.io()) // attach thread , so that down streams will run
                .map(message -> { //down and up stream
                    System.out.println("Third Map is running on " + Thread.currentThread().getName());
                    return message;
                })
                .subscribeOn(Schedulers.newThread())
                .blockingLast();


    }
}




